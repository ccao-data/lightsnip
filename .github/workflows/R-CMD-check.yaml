on:
  push:
  pull_request:
  schedule:
    - cron: '0 1 * * *'

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@v1

      - uses: r-lib/actions/setup-r@master

      - name: Install remotes
        run: install.packages(c("remotes", "rcmdcheck"))
        shell: Rscript {0}

      - name: Install additional dependencies
        run: |
          remotes::install_deps(dependencies = TRUE, INSTALL_opts = c("--no-multiarch"))
        shell: Rscript {0}

      - name: Remove lightgbm
        run: |
          remove.packages("lightgbm")
        shell: Rscript {0}

      - name: Install dev lightgbm
        run: |
          cd ..
          git clone --recursive https://github.com/microsoft/LightGBM.git --branch fix/network-setup
          cd LightGBM
          sh build-cran-package.sh
          Rscript -e "install.packages(c('R6', 'data.table', 'jsonlite'))"
          Rscript -e "install.packages('lightgbm_3.2.1.99.tar.gz', repos = NULL, type='source')"

      - name: Install catboost
        run: |
          remotes::install_url("https://github.com/catboost/catboost/releases/download/v0.26/catboost-R-Windows-0.26.tgz", INSTALL_opts = c("--no-multiarch"))
        shell: Rscript {0}

      - name: catboost and lightgbm
        run: |
          library(lightgbm)
          data(agaricus.train, package='lightgbm')
          print(sessionInfo())
          train <- agaricus.train
          dtrain <- lgb.Dataset(train$data, label = train$label)
          model <- lgb.cv(
              params = list(
                  objective = "regression"
                  , metric = "l2"
              )
              , data = dtrain
          )
        shell: Rscript {0}

      - name: catboost and lightgbm
        run: |
          library(parsnip)
          library(lightgbm)
          data(agaricus.train, package='lightgbm')
          print(sessionInfo())
          train <- agaricus.train
          dtrain <- lgb.Dataset(train$data, label = train$label)
          model <- lgb.cv(
              params = list(
                  objective = "regression"
                  , metric = "l2"
              )
              , data = dtrain
          )

        shell: Rscript {0}
      - name: Check
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--no-multiarch"), error_on = "error", check_dir = "check")
        shell: Rscript {0}
      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash
